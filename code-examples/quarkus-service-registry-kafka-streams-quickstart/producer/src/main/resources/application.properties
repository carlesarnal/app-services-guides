
##'temperature-values' topic configuration
mp.messaging.outgoing.temperature-values.apicurio.registry.auto-register=true
mp.messaging.outgoing.temperature-values.apicurio.registry.find-latest=true
mp.messaging.outgoing.temperature-values.apicurio.registry.artifact-resolver-strategy=io.apicurio.registry.serde.avro.strategy.TopicRecordIdStrategy
mp.messaging.outgoing.temperature-values.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider

mp.messaging.outgoing.temperature-values.connector=smallrye-kafka
mp.messaging.outgoing.temperature-values.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.temperature-values.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer

mp.messaging.outgoing.temperature-values.apicurio.auth.realm=${OAUTH_REALM:rhoas}
mp.messaging.outgoing.temperature-values.apicurio.auth.service.url=${OAUTH_SERVER_URL:https://identity.api.openshift.com/auth}
mp.messaging.outgoing.temperature-values.apicurio.auth.client.id=${CLIENT_ID}
mp.messaging.outgoing.temperature-values.apicurio.auth.client.secret=${CLIENT_SECRET}

##'weather-stations' topic configuration
mp.messaging.outgoing.weather-stations.apicurio.registry.auto-register=true
mp.messaging.outgoing.weather-stations.apicurio.registry.find-latest=true
mp.messaging.outgoing.weather-stations.apicurio.registry.artifact-resolver-strategy=io.apicurio.registry.serde.avro.strategy.TopicRecordIdStrategy
mp.messaging.outgoing.weather-stations.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider

mp.messaging.outgoing.weather-stations.connector=smallrye-kafka
mp.messaging.outgoing.weather-stations.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.weather-stations.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer

mp.messaging.outgoing.weather-stations.apicurio.auth.realm=${OAUTH_REALM:rhoas}
mp.messaging.outgoing.weather-stations.apicurio.auth.service.url=${OAUTH_SERVER_URL:https://identity.api.openshift.com/auth}
mp.messaging.outgoing.weather-stations.apicurio.auth.client.id=${CLIENT_ID}
mp.messaging.outgoing.weather-stations.apicurio.auth.client.secret=${CLIENT_SECRET}

mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${REGISTRY_URL}

##Kafka servers and auth configuration
kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
kafka.security.protocol=SASL_SSL

kafka.sasl.mechanism=OAUTHBEARER
kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler